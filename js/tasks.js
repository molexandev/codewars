'use strict';

//! –ó–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–æ —Å–ø—ñ–≤–±–µ—Å—ñ–¥–∏

// TODO –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é getUserPosts(userId), —è–∫–∞: –ü—Ä–∏–π–º–∞—î userId (—á–∏—Å–ª–æ) —è–∫ –∞—Ä–≥—É–º–µ–Ω—Ç.–ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –ø–æ—Å—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ API: https://jsonplaceholder.typicode.com/posts?userId=USER_ID –í–∏–≤–æ–¥–∏—Ç—å —É –∫–æ–Ω—Å–æ–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—Å—Ç—ñ–≤ —Ü—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å title).
//
// const getUserPosts = async (userId) => {
//    try {
//       const response = await fetch(
//          `https://jsonplaceholder.typicode.com/posts?userId=${userId}`
//       );

//       if (!response.ok) {
//          throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö');
//       }

//       const data = await response.json();
//       const userPosts = data.map((item) => item.title);
//       console.log(userPosts);
//    } catch (error) {
//       console.error('–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞:', error.message);
//    }
// };

// getUserPosts(1);

// TODO –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞: –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤. –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î –≤—Å—ñ –ø–æ—Å—Ç–∏. –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –æ–Ω—Å–æ–ª—å: '–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: –∫—ñ–ª—å–∫—ñ—Å—Ç—å –ø–æ—Å—Ç—ñ–≤'

// const getUserPosts = async () => {
//    const users = await fetch('https://jsonplaceholder.typicode.com/users');
//    const posts = await fetch('https://jsonplaceholder.typicode.com/posts');

//    if (!users.ok || !posts.ok) {
//       throw new Error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –¥–∞–Ω–∏—Ö');
//    }

//    const usersData = await users.json();
//    const postsData = await posts.json();

//    const userPostStats = usersData.map((user) => {
//       return {
//          name: user.name,
//          postsCount: postsData.filter((post) => post.userId === user.id).length,
//       };
//    });

//    userPostStats.forEach((user) => {
//       console.log(`${user.name}: ${user.postsCount}`);
//    });
// };

// getUserPosts();

// TODO –ó–∞–º–∏–∫–∞–Ω–Ω—è (–ø—Ä–∞–∫—Ç–∏–∫–∞)

// function createUser(name) {
//    let loginCount = 0;

//    return {
//       getName() {
//          return name;
//       },
//       login() {
//          loginCount++;
//          console.log(`${name} has logged in ${loginCount} times.`);
//       },
//    };
// }

// const user1 = createUser('Sasha');

// user1.getName(); // "Sasha"
// user1.login(); // Sasha has logged in 1 times.
// user1.login();
// user1.login();
// user1.login();
// user1.login();
// user1.login();
// user1.login();

//

// function createCounter() {
//    let count = 0;
//    let obj = {
//       increment: function () {
//          return count++;
//       },
//       decrement: function () {
//          return count--;
//       },
//       getValue: function () {
//          return count;
//       },
//       reset: function () {
//          count = 0;
//          return count;
//       },
//    };
//    return obj;
//    // let count = 0;

//    // return function () {
//    //    console.log(count++);
//    //    return count;
//    // };
// }

// const counter = createCounter();

// // counter(); // 1
// // counter(); // 2
// // counter(); // 3

// console.log(counter.increment()); // 1
// console.log(counter.increment()); // 2
// console.log(counter.increment()); // 3
// console.log(counter.decrement()); // 3
// console.log(counter.getValue()); // 2
// console.log(counter.reset()); // 0

//

// function createAccount() {
//    let balance = 0;

//    return {
//       getBalance() {
//          if (balance > 0) {
//             return balance;
//          } else if (balance < 0) {
//             return '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!';
//          } else if (balance == 0) {
//             return '–ù–∞ –≤–∞—à–æ–º—É —Ä–∞—Ö—É–Ω–∫—É 0';
//          }
//          return balance;
//       },
//       deposit(num) {
//          return (balance += num);
//       },
//       withdraw(num) {
//          if (balance - num < 0) {
//             return '–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤!';
//          } else {
//             return (balance -= num);
//          }
//       },
//    };
// }

// const myAccount = createAccount();

// console.log(myAccount.getBalance()); // 0

// myAccount.deposit(100);
// console.log(myAccount.getBalance()); // 100

// myAccount.withdraw(30);
// console.log(myAccount.getBalance()); // 70

// myAccount.withdraw(70);
// console.log(myAccount.getBalance());
// myAccount.withdraw(100); // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É
// console.log(myAccount.getBalance()); // 70
// myAccount.withdraw(200);
// console.log(myAccount.getBalance()); // 70

// function createClickCounter(limit) {
//    let clickCounter = 0;

//    return function () {
//       clickCounter++;

//       if (clickCounter <= limit) {
//          return console.log(`–ö–ª—ñ–∫ ‚Ññ ${clickCounter}`);
//       } else {
//          return console.log(`–õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ!`);
//       }
//    };
// }

// const click = createClickCounter(3);

// click(); // –ö–ª—ñ–∫ ‚Ññ1
// click(); // –ö–ª—ñ–∫ ‚Ññ2
// click(); // –ö–ª—ñ–∫ ‚Ññ3
// click(); // –õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ!
// click(); // –õ—ñ–º—ñ—Ç –≤–∏—á–µ—Ä–ø–∞–Ω–æ!

// TODO This (–ø—Ä–∞–∫—Ç–∏–∫–∞)

// const user = {
//    name: '–°–∞—à–∞',
//    sayHi() {
//       console.log(this.name);
//    },
// };

// const hi = user.sayHi.bind(user);
// hi();

// console.log(user);
// console.log(user.name);
// console.log(hi());

//

// function createUser() {
//    let name = '';

//    return {
//       setName(newName) {
//          return (name = newName);
//       },
//       getName() {
//          return name;
//       },
//       sayHello() {
//          return console.log(`–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ ${name}`);
//       },
//    };
// }

// const user = createUser();

// user.setName('–°–∞—à–∞');
// // user.setName('–í–∞—Å—è');
// // user.setName('–ü–µ—Ç—è');
// user.sayHello(); // –ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –°–∞—à–∞
// console.log(user.getName()); // –°–∞—à–∞

// const user = {
//    name: '–°–∞—à–∞',
//    greet: () => {
//       console.log(`–ü—Ä–∏–≤—ñ—Ç, —è ${this.name}`);
//    },
// };

// user.greet(); // –©–æ –±—É–¥–µ –≤–∏–≤–µ–¥–µ–Ω–æ? –ß–æ–º—É?

//

// TODO üß† –ó–∞–¥–∞—á–∞: "–õ—é–¥–∏–Ω–∞ ‚Üí –ü—Ä–∞—Ü—ñ–≤–Ω–∏–∫ ‚Üí –†–æ–∑—Ä–æ–±–Ω–∏–∫" –£ —Ç–µ–±–µ —î —Ç—Ä–∏ —Ä—ñ–≤–Ω—ñ –æ–±'—î–∫—Ç—ñ–≤:

// TODO  person ‚Äî –±–∞–∑–æ–≤–∏–π –æ–±'—î–∫—Ç, —É –Ω—å–æ–≥–æ —î –º–µ—Ç–æ–¥ sayHello(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å:"–ü—Ä–∏–≤—ñ—Ç, —è –ª—é–¥–∏–Ω–∞!"

// TODO employee ‚Äî –æ–±'—î–∫—Ç, —è–∫–∏–π –Ω–∞—Å–ª—ñ–¥—É—î –≤—ñ–¥ person, —ñ –º–∞—î –º–µ—Ç–æ–¥ work(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å: "–Ø –ø—Ä–∞—Ü—é—é!"

// TODO developer ‚Äî –æ–±'—î–∫—Ç, —è–∫–∏–π –Ω–∞—Å–ª—ñ–¥—É—î –≤—ñ–¥ employee, —ñ –º–∞—î –º–µ—Ç–æ–¥ code(), —è–∫–∏–π –≤–∏–≤–æ–¥–∏—Ç—å:"–Ø –ø–∏—à—É –∫–æ–¥!"

// TODO –°—Ç–≤–æ—Ä–∏ —Ü—ñ –æ–±'—î–∫—Ç–∏ –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º –ª–∞–Ω—Ü—é–∂–∫–æ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤. –ü–µ—Ä–µ–≤—ñ—Ä, —â–æ developer –º–æ–∂–µ –≤–∏–∫–ª–∏–∫–∞—Ç–∏: code() work() (—É—Å–ø–∞–¥–∫–æ–≤–∞–Ω–æ –≤—ñ–¥ employee) sayHello() (—É—Å–ø–∞–¥–∫–æ–≤–∞–Ω–æ –≤—ñ–¥ person)

// const person = {
//    sayHello() {
//       console.log('–ü—Ä–∏–≤—ñ—Ç, —è –ª—é–¥–∏–Ω–∞!');
//    },
// };

// const employee = {
//    work() {
//       console.log('–Ø –ø—Ä–∞—Ü—é—é!');
//    },
//    __proto__: person,
// };

// const developer = {
//    code() {
//       console.log('–Ø –ø–∏—à—É –∫–æ–¥!');
//    },
//    __proto__: employee,
// };

// developer.sayHello();
// developer.work();
// developer.code();

// const person = {
//    sayHello() {
//       console.log('–ü—Ä–∏–≤—ñ—Ç, —è –ª—é–¥–∏–Ω–∞!');
//    },
// };

// const employee = Object.create(person); // —Ç–µ–ø–µ—Ä employee –º–∞—î person —è–∫ –ø—Ä–æ—Ç–æ—Ç–∏–ø
// employee.work = function () {
//    console.log('–Ø –ø—Ä–∞—Ü—é—é!');
// };

// const developer = Object.create(employee); // developer –Ω–∞—Å–ª—ñ–¥—É—î –≤—ñ–¥ employee
// developer.code = function () {
//    console.log('–Ø –ø–∏—à—É –∫–æ–¥!');
// };

// developer.code(); // –Ø –ø–∏—à—É –∫–æ–¥!
// developer.work(); // –Ø –ø—Ä–∞—Ü—é—é!
// developer.sayHello(); // –ü—Ä–∏–≤—ñ—Ç, —è –ª—é–¥–∏–Ω–∞!

//

// TODO –£—è–≤–∏, —â–æ –º–∏ –º–∞—î–º–æ —Ä—ñ–∑–Ω—ñ —Ä–æ–ª—ñ –≤ IT-–∫–æ–º–∞–Ω–¥—ñ. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å—Ç–≤–æ—Ä–∏—Ç–∏ –æ–±'—î–∫—Ç–∏ –∑ –ª–∞–Ω—Ü—é–∂–∫–æ–º –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤ —Ç–∞–∫, —â–æ–± –∫–æ–∂–µ–Ω –Ω–∞—Å—Ç—É–ø–Ω–∏–π "–Ω–∞—Å–ª—ñ–¥—É–≤–∞–≤" –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ–≥–æ.

// TODO –°—Ç–≤–æ—Ä–∏ –æ–±‚Äô—î–∫—Ç teamMember, –≤ —è–∫–æ–º—É —î –º–µ—Ç–æ–¥ introduce(), —â–æ –≤–∏–≤–æ–¥–∏—Ç—å: "–Ø —á–∞—Å—Ç–∏–Ω–∞ –∫–æ–º–∞–Ω–¥–∏!"

// TODO –°—Ç–≤–æ—Ä–∏ –æ–±‚Äô—î–∫—Ç designer, —è–∫–∏–π –º–∞—î –º–µ—Ç–æ–¥ design(), —â–æ –≤–∏–≤–æ–¥–∏—Ç—å: "–Ø —Å—Ç–≤–æ—Ä—é—é –¥–∏–∑–∞–π–Ω!" —ñ –Ω–∞—Å–ª—ñ–¥—É—î teamMember

// TODO –°—Ç–≤–æ—Ä–∏ –æ–±‚Äô—î–∫—Ç frontendDev, —è–∫–∏–π –º–∞—î –º–µ—Ç–æ–¥ code(), —â–æ –≤–∏–≤–æ–¥–∏—Ç—å: "–Ø –ø–∏—à—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–∫–æ–¥!" —ñ –Ω–∞—Å–ª—ñ–¥—É—î designer

// const teamMember = {
//    introduce: function () {
//       console.log('–Ø —á–∞—Å—Ç–∏–Ω–∞ –∫–æ–º–∞–Ω–¥–∏!');
//    },
// };

// const designer = Object.create(teamMember);
// designer.design = function () {
//    console.log('–Ø —Å—Ç–≤–æ—Ä—é—é –¥–∏–∑–∞–π–Ω!');
// };

// const frontendDev = Object.create(designer);
// frontendDev.code = function () {
//    console.log('–Ø –ø–∏—à—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–∫–æ–¥!');
// };

// frontendDev.code(); // "–Ø –ø–∏—à—É —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥-–∫–æ–¥!"
// frontendDev.design(); // "–Ø —Å—Ç–≤–æ—Ä—é—é –¥–∏–∑–∞–π–Ω!"
// frontendDev.introduce();

// TODO –°—Ç–≤–æ—Ä–∏—Ç–∏ –ª–∞–Ω—Ü—é–∂–æ–∫ –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ–≤ —ñ–∑ –º–µ—Ç–æ–¥–∞–º–∏ —Ç–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏/

// TODO –°—Ç–≤–æ—Ä–∏ –æ–±‚Äô—î–∫—Ç animal, —è–∫–∏–π –º–∞—î –º–µ—Ç–æ–¥ eat(), —â–æ –≤–∏–≤–æ–¥–∏—Ç—å "–Ø —ó–º".
// TODO –°—Ç–≤–æ—Ä–∏ –æ–±‚Äô—î–∫—Ç mammal, —è–∫–∏–π –Ω–∞—Å–ª—ñ–¥—É—î –≤—ñ–¥ animal, —ñ –º–∞—î –º–µ—Ç–æ–¥ walk(), —â–æ –≤–∏–≤–æ–¥–∏—Ç—å "–Ø –π–¥—É".
// TODO –°—Ç–≤–æ—Ä–∏ –æ–±‚Äô—î–∫—Ç human, —è–∫–∏–π –Ω–∞—Å–ª—ñ–¥—É—î –≤—ñ–¥ mammal, —ñ –º–∞—î –º–µ—Ç–æ–¥ speak(), —â–æ –≤–∏–≤–æ–¥–∏—Ç—å "–Ø —Ä–æ–∑–º–æ–≤–ª—è—é".

// const animal = {
//    eat() {
//       console.log('–Ø —ó–º');
//    },
// };

// const mammal = Object.create(animal);
// mammal.walk = function () {
//    console.log('–Ø –π–¥—É');
// };

// const human = Object.create(mammal);
// human.speak = function () {
//    console.log('–Ø —Ä–æ–∑–º–æ–≤–ª—è—é');
// };

// human.eat();
// human.walk();
// human.speak();

// const proto1 = Object.getPrototypeOf(animal);
// const proto2 = Object.getPrototypeOf(mammal);
// const proto3 = Object.getPrototypeOf(human);

// console.log(proto3 === mammal); // true
// console.log(proto2 === animal); // true
// console.log(proto1 === Object.prototype); // true

// console.log(human.hasOwnProperty('eat')); // false
// console.log('eat' in human); // true

// * –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ prototype

// –ö—Ä–æ–∫ 1. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Person
// function Person(name) {
//    this.name = name;
// }

// // –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥ —É –ø—Ä–æ—Ç–æ—Ç–∏–ø Person
// Person.prototype.sayHello = function () {
//    console.log(`–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}`);
// };

// // –ö—Ä–æ–∫ 2. –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä Developer
// function Developer(name) {
//    // –ù–∞—Å–ª—ñ–¥—É—î–º–æ –≤–ª–∞—Å—Ç–∏–≤—ñ—Å—Ç—å name –≤—ñ–¥ Person
//    Person.call(this, name);
// }

// // –ö—Ä–æ–∫ 3. –ù–∞—Å–ª—ñ–¥—É—î–º–æ –º–µ—Ç–æ–¥–∏ Person
// Developer.prototype = Object.create(Person.prototype);

// // –ö—Ä–æ–∫ 4. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
// Developer.prototype.constructor = Developer;

// // –î–æ–¥–∞—î–º–æ –º–µ—Ç–æ–¥ —É Developer
// Developer.prototype.code = function () {
//    console.log('–Ø –ø–∏—à—É –∫–æ–¥');
// };

// // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞:
// const dev = new Developer('–°–∞—à–∞');

// dev.sayHello(); // –ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ –°–∞—à–∞
// dev.code(); // –Ø –ø–∏—à—É –∫–æ–¥

// console.log(dev instanceof Developer); // true
// console.log(dev instanceof Person); // true

//

// function Person(name) {
//    this.name = name;
// }

// Person.prototype.sayHello = function () {
//    console.log(`–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}`);
// };

// function Developer(name) {
//    Person.call(this, name);
// }

// Developer.prototype = Object.create(Person.prototype);
// Developer.prototype.constructor = Developer;

// Developer.prototype.code = function () {
//    console.log('–Ø –ø–∏—à—É –∫–æ–¥');
// };

// const dev = new Developer('Olexandr');
// const dev2 = new Developer('Shura');

// dev.sayHello();
// dev.code();
// dev2.sayHello();
// dev2.code();

// * –ù–∞—Å–ª—ñ–¥—É–≤–∞–Ω–Ω—è —á–µ—Ä–µ–∑ class

// class Person {
//    constructor(name) {
//       this.name = name;
//    }

//    sayHello() {
//       console.log(`–ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}`);
//    }
// }

// class Developer extends Person {
//    code() {
//       console.log('–Ø –ø–∏—à—É –∫–æ–¥');
//    }
// }

// const dev = new Developer('Olexandr');
// const dev2 = new Developer('Shura');

// dev.sayHello(); // –ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ Olexandr
// dev.code(); // –Ø –ø–∏—à—É –∫–æ–¥

// dev2.sayHello(); // –ü—Ä–∏–≤—ñ—Ç, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ Shura
// dev2.code(); // –Ø –ø–∏—à—É –∫–æ–¥

//? class Person —Å—Ç–≤–æ—Ä—é—î –∫–ª–∞—Å –∑ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–æ–º —ñ –º–µ—Ç–æ–¥–æ–º sayHello.

//? class Developer extends Person ‚Äî —Ü–µ —É—Å–ø–∞–¥–∫—É–≤–∞–Ω–Ω—è. Developer —É—Å–ø–∞–¥–∫–æ–≤—É—î –≤—Å—ñ –≤–ª–∞—Å—Ç–∏–≤–æ—Å—Ç—ñ –π –º–µ—Ç–æ–¥–∏ –≤—ñ–¥ Person.

//? –ú–µ—Ç–æ–¥ code() ‚Äî –≤–ª–∞—Å–Ω–∏–π –º–µ—Ç–æ–¥ Developer.

//? super(...) –≤–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä–∞, —è–∫—â–æ —Ç–æ–±—ñ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω–∞—Ç–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–æ–≥–æ –∫–ª–∞—Å—É (—Ç—É—Ç ‚Äî –Ω–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ, –±–æ –º–∏ –Ω–µ –ø–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∞–ª–∏ constructor –≤ Developer, –∞–ª–µ –ø–æ–∫–∞–∂—É –ø—Ä–∏–∫–ª–∞–¥ –Ω–∏–∂—á–µ).

// class Animal {
//    constructor(name) {
//       this.name = name;
//    }

//    speak() {
//       console.log(`–Ø —Ç–≤–∞—Ä–∏–Ω–∞, –º–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}`);
//    }
// }

// class Dog extends Animal {
//    constructor(name, breed) {
//       super(name);
//       this.breed = breed;
//    }
//    bark() {
//       console.log('–ì–∞–≤-–≥–∞–≤!');
//    }

//    info() {
//       console.log(`–Ø –ø–æ—Ä–æ–¥–∏ ${this.breed} —ñ –º–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}`);
//    }
// }

// const cow = new Animal('Murka');
// const cow2 = new Animal('Lyska');
// const cow3 = new Animal('Kalynka');

// cow.speak();
// cow2.speak();
// cow3.speak();

// const dog = new Dog('Muchtar', 'Vivcharcka');

// dog.speak();
// dog.bark();
// dog.info();

//! –Ü–Ω–∫–∞–ø—Å—É–ª—è—Ü—ñ—è

// class BankAccount {
//    #balance = 0;

//    constructor(owner) {
//       this.owner = owner;
//    }

//    deposit(amount) {
//       return (this.#balance += amount);
//    }

//    withdraw(amount) {
//       return (this.#balance -= amount);
//    }

//    getBalance() {
//       return console.log(this.#balance);
//    }
// }

// const acc = new BankAccount('–°–∞—à–∞');

// acc.deposit(1000);
// acc.withdraw(300);
// acc.getBalance(); // 700
// // console.log(acc.#balance); // ‚ùå –ü–æ–º–∏–ª–∫–∞ ‚Äî –Ω–µ –º–æ–∂–Ω–∞ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –¥–æ –ø—Ä

//

// class LimitedCounter {
//    #value = 0;
//    #min;
//    #max;

//    constructor(min, max) {
//       this.#min = min;
//       this.#max = max;
//       this.#value = min;
//    }

//    increment() {
//       if (this.#value < this.#max) {
//          this.#value++;
//       }
//    }

//    decrement() {
//       if (this.#value > this.#min) {
//          this.#value--;
//       }
//    }

//    getValue() {
//       console.log(this.#value);
//    }
// }

// const counter = new LimitedCounter(0, 3);

// counter.getValue(); // 0
// counter.increment();
// counter.increment();
// counter.getValue(); // 2
// counter.increment();
// counter.increment(); // –¥–æ max
// counter.getValue(); // 3
// counter.increment(); // –Ω—ñ—á–æ–≥–æ –Ω–µ –∑–º—ñ–Ω—é—î

// counter.decrement();
// counter.decrement();
// counter.decrement();
// counter.decrement(); // –Ω–∏–∂—á–µ min –Ω–µ –π–¥–µ
// counter.getValue(); // 0

//

// class CountdownTimer {
//    #time = 0;
//    #intervalId = null;
//    #initialTime = 0;
//    #isPaused = false;

//    constructor(seconds, onUpdate) {
//       this.time = seconds;
//       this.#initialTime = seconds;
//       this.onUpdate = onUpdate;
//    }

//    get time() {
//       return this.#time;
//    }

//    set time(value) {
//       if (typeof value !== 'number' || value < 0) return;
//       this.#time = value;
//       this.onUpdate?.(this.#time);
//    }

//    tick() {
//       if (this.#time > 0) {
//          this.#time--;
//          this.onUpdate?.(this.#time);
//       } else {
//          this.stop();
//          alert('‚è∞ –ß–∞—Å –≤–∏–π—à–æ–≤!');
//       }
//    }

//    start() {
//       if (this.#intervalId || this.#time <= 0) return;
//       this.#isPaused = false;
//       this.#intervalId = setInterval(() => this.tick(), 1000);
//    }

//    pause() {
//       if (this.#intervalId) {
//          clearInterval(this.#intervalId);
//          this.#intervalId = null;
//          this.#isPaused = true;
//       }
//    }

//    resume() {
//       if (!this.#intervalId && this.#isPaused) {
//          this.#intervalId = setInterval(() => this.tick(), 1000);
//          this.#isPaused = false;
//       }
//    }

//    togglePause() {
//       this.#isPaused ? this.resume() : this.pause();
//    }

//    stop() {
//       clearInterval(this.#intervalId);
//       this.#intervalId = null;
//       this.#isPaused = false;
//    }

//    reset() {
//       this.stop();
//       this.#time = this.#initialTime;
//       this.onUpdate?.(this.#time);
//    }
// }

// const display = document.getElementById('display');
// const startBtn = document.getElementById('start');
// const resetBtn = document.getElementById('reset');

// // –§—É–Ω–∫—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É
// function updateDisplay(time) {
//    display.textContent = time < 10 ? `0${time}` : time;
// }

// const timer = new CountdownTimer(10, updateDisplay);

// startBtn.addEventListener('click', () => timer.start());
// resetBtn.addEventListener('click', () => timer.reset());
// const pauseBtn = document.getElementById('pause');

// pauseBtn.addEventListener('click', () => {
//    timer.togglePause();
//    pauseBtn.textContent =
//       pauseBtn.textContent === '–ü–∞—É–∑–∞' ? '–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏' : '–ü–∞—É–∑–∞';
// });

//! This
// function show() {
//    console.log(this);
// }

// show();

// const obj = {
//    name: 'JS',
//    show() {
//       console.log(this.name);
//    },
// };

// const fn = obj.show;
// fn();

// const obj = {
//    name: 'JS',
//    show: function () {
//       const inner = () => {
//          console.log(this.name);
//       };
//       inner();
//    },
// };

// obj.show();

//! call, apply, bind

// const person = {
//    name: '–û–ª–µ–∫—Å–∞',
// };

// function sayHi(city, age) {
//    console.log(`–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}, —è –∑ ${city}, –º–µ–Ω—ñ ${age}`);
// }

// sayHi.call(person, '–õ—å–≤—ñ–≤', 30);
// sayHi.apply(person, ['–õ—å–≤—ñ–≤', 30]);
// const newFunc = sayHi.bind(person, '–õ—å–≤—ñ–≤', 30);
// newFunc();

//

// const user1 = { name: '–°–∞—à–∞' };
// const user2 = { name: '–ù–∞—Ç–∞–ª—è' };

// function introduce(job, company) {
//    console.log(
//       `–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}, —è –ø—Ä–∞—Ü—é—é ${job} —É –∫–æ–º–ø–∞–Ω—ñ—ó ${company}`
//    );
// }

// introduce.call(user1, 'Front-end developer', 'Global Logic');
// introduce.apply(user2, ['–ú–∞—Ä–∫–µ—Ç–æ–ª–æ–≥', '–ê–¢–ë']);
// const foo = introduce.bind(user1, 'Front-end developer', 'Global Logic');
// foo();

//! –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è call, apply, bind —É –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ –æ–±'—î–∫—Ç–Ω–æ-–æ—Ä—ñ—î–Ω—Ç–æ–≤–∞–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º—É–≤–∞–Ω–Ω—è (OOP)

// function Person(name, age) {
//    this.name = name;
//    this.age = age;
// }

// Person.prototype.introduce = function () {
//    console.log(`–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}, –º–µ–Ω—ñ ${this.age} —Ä–æ–∫—ñ–≤`);
// };

// function Developer(name, age, skill) {
//    Person.call(this, name, age); // –í–∏–∫–ª–∏–∫–∞—î–º–æ Person –∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º this
//    this.skill = skill;
// }

// Developer.prototype = Object.create(Person.prototype);
// Developer.prototype.constructor = Developer;

// Developer.prototype.code = function () {
//    console.log(`–Ø –ø—Ä–æ–≥—Ä–∞–º—É—é –Ω–∞ ${this.skill}`);
// };

// const dev = new Developer('–°–∞—à–∞', 30, 'JavaScript');
// dev.introduce(); // –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –°–∞—à–∞, –º–µ–Ω—ñ 30 —Ä–æ–∫—ñ–≤
// dev.code(); // –Ø –ø—Ä–æ–≥—Ä–∞–º—É—é –Ω–∞ JavaScript

//

// class Person {
//    constructor(name, age) {
//       this.name = name;
//       this.age = age;
//    }

//    introduce() {
//       console.log(`–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ ${this.name}, –º–µ–Ω—ñ ${this.age} —Ä–æ–∫—ñ–≤`);
//    }
// }

// class Developer extends Person {
//    constructor(name, age, skill) {
//       super(name, age); // –í–∏–∫–ª–∏–∫–∞—î constructor –∑ Person
//       this.skill = skill;
//    }

//    code() {
//       console.log(`–Ø –ø–∏—à—É –∫–æ–¥ –Ω–∞ ${this.skill}`);
//    }
// }

// const dev = new Developer('–ù–∞—Ç–∞–ª—è', 28, 'React');

// dev.introduce(); // –ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –ù–∞—Ç–∞–ª—è, –º–µ–Ω—ñ 28 —Ä–æ–∫—ñ–≤
// dev.code(); // –Ø –ø–∏—à—É –∫–æ–¥ –Ω–∞ React

//

// –ó –ø–æ–º–∏–ª–∫–æ—é:
// class Timer {
//    constructor(time) {
//       this.time = time;
//    }

//    start() {
//       this.time++;
//       console.log(`–ß–∞—Å –π–¥–µ ${this.time} —Å–µ–∫.`);
//    }
// }

// const timer = new Timer(0);
// setInterval(timer.start(), 1000);

// –í–∏–ø—Ä–∞–≤–ª–µ–Ω–æ:
// class Timer {
//    constructor(time) {
//       this.time = time;
//    }

//    start() {
//       this.time++;
//       console.log(`–ß–∞—Å –π–¥–µ ${this.time} —Å–µ–∫.`);
//    }
// }

// const timer = new Timer(0);
// // setInterval(timer.start.bind(timer), 1000);
// setInterval(() => {
//    timer.start(0);
// }, 1000);

//

// const intervalId = setInterval(() => {
//    console.log('Hello');
// }, 1000);

// setInterval(() => {
//    clearInterval(intervalId);
// }, 3000);

//

// class Counter {
//    constructor(startValue) {
//       this.startValue = startValue;
//       this.timerId = null;
//    }

//    start = () => {
//       this.timerId = setInterval(() => {
//          console.log(this.startValue++);
//       }, 1000);
//    };

//    stop() {
//       clearInterval(this.timerId);
//    }
// }

// const counter = new Counter(10);
// counter.start();

// setTimeout(() => {
//    counter.stop();
// }, 5000);

// class PauseableTimer {
//    constructor(startValue) {
//       this.startValue = startValue;
//       this.timerId = null;
//    }

//    start() {
//       this.timerId = setInterval(() => {
//          console.log(++this.startValue);
//       }, 1000);
//    }

//    pause() {
//       clearInterval(this.timerId);
//       this.timerId = null;
//    }

//    resume() {
//       if (this.timerId === null) {
//          this.timerId = setInterval(() => {
//             console.log(++this.startValue);
//          }, 1000);
//       }
//    }
// }

// const t = new PauseableTimer(0);

// t.start();

// setTimeout(() => t.pause(), 3000); // –∑—É–ø–∏–Ω–∫–∞ –ø—ñ—Å–ª—è 3 —Å–µ–∫
// setTimeout(() => t.resume(), 5000); // –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫ –ø–∞—É–∑–∏

// const animal = {
//    eats: true,
// };
// const dog = Object.create(animal);
// dog.barks = true;

// console.log(dog.eats); // true
// console.log(dog.barks); // true
// console.log(Object.getPrototypeOf(dog) === animal); // true

const person = {
   name: '–ù–∞—Ç–∞–ª—è',
   sayHi() {
      console.log(`–ü—Ä–∏–≤—ñ—Ç, —è ${this.name}`);
   },
};

const say = person.sayHi;
say(); // –©–æ –≤–∏–≤–µ–¥–µ?
